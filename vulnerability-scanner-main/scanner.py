import socket
import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def scan_ports(target_ip):
    print(f"\n[+] Scanning ports on {target_ip} (1–1024)...")
    open_ports = []
    for port in range(1, 1025):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((target_ip, port))
        if result == 0:
            print(f"  [OPEN] Port {port}")
            open_ports.append(port)
        sock.close()
    if not open_ports:
        print("  [!] No open ports found.")
    return open_ports

def analyze_headers(url):
    print(f"\n[+] Analyzing HTTP headers for: {url}")
    try:
        response = requests.get(url, verify=False)
        print("  [*] Response Headers:")
        for header, value in response.headers.items():
            print(f"    {header}: {value}")
        
        print("\n  [*] Security Header Check:")
        security_headers = ["Content-Security-Policy", "X-Frame-Options", "X-XSS-Protection", "Strict-Transport-Security"]
        for header in security_headers:
            if header in response.headers:
                print(f"    [+] {header} is set ✅")
            else:
                print(f"    [-] {header} is NOT set ❌")

    except requests.exceptions.RequestException as e:
        print(f"  [!] Error: {e}")

if __name__ == "__main__":
    print("=== Vulnerability Scanner ===")
    target = input("Enter target (IP for port scan, or full URL for header scan): ")

    if target.startswith("http://") or target.startswith("https://"):
        analyze_headers(target)
    else:
        scan_ports(target)
